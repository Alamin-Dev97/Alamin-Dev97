const axios = require("axios"); const fs = require("fs"); const path = require("path"); const https = require("https"); const API_URL = "https://nix-random-api.vercel.app/api/video/mixvideo"; module.exports.config = { name: "random", version: "1.0", role: 0, author: "ArYAN", description: "Send a random video from API", category: "media", cooldowns: 5 }; module.exports.onStart = async function ({ api, event }) { const { threadID, messageID } = event; try { const res = await axios.get(API_URL); const data = res.data; if (!data || !data.url || !data.url.url) { return api.sendMessage("[⚜️]➜ error random api.", threadID, messageID); } const videoUrl = data.url.url; const name = data.url.name; const cp = data.cp; const total = data.length; const cacheDir = path.join(__dirname, "cache"); if (!fs.existsSync(cacheDir)) fs.mkdirSync(cacheDir); const filePath = path.join(cacheDir, `rndm_${Date.now()}.mp4`); const file = fs.createWriteStream(filePath); const downloadPromise = new Promise((resolve, reject) => { https.get(videoUrl, (response) => { if (response.statusCode !== 200) { file.end(); fs.unlink(filePath, () => {}); return reject(new Error(`Download failed with status code ${response.statusCode}`)); } response.pipe(file); file.on("finish", () => resolve()); }).on("error", (err) => { file.end(); fs.unlink(filePath, () => {}); reject(err); }); }); await downloadPromise; const responseMsg = `${cp}\n\n𝐓𝐨𝐭𝐚𝐥 𝐕𝐢𝐝𝐞𝐨𝐬: [${total}]\n𝐀𝐝𝐝𝐞𝐝 𝐓𝐡𝐢𝐬 𝐕𝐢𝐝𝐞𝐨 𝐓𝐨 𝐓𝐡𝐞 𝐀𝐩𝐢 𝐁𝐲 [${name}]`; return api.sendMessage({ body: responseMsg, attachment: fs.createReadStream(filePath) }, threadID, () => { fs.unlinkSync(filePath); }, messageID); } catch (err) { console.error(err); return api.sendMessage("[⚜️]➜ Failed to fetch video. Please try again later.", threadID, messageID); } };
